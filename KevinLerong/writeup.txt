. What is a scene graph made of? What are its various parts and what is the function of each part (in the code, not
in general)?

	at a high level a scene graph is a xml parser that is meant to parse nodes that specify tansforms, materials, models, and lighting. It also provides functionality to draw.

	INode: interface for the nodes

	AbstractNode: implements Inode and provides default methods

	GroupNode: provides the functionality to have multiple children

	Transformnode: holds a transform, one child

	LeafNode: the only node that is allowed to have a material or object instance

2. How is the scene graph drawn, and how does it ensure the correct transformation gets applied to the correct
part?

	the scenegraph is drawn one node at a time as the tree is navigated downwards so that the transformations are applied before drawing a specific model.
	Then once a leaf node is drawn, when the parser moves back up the tree, the transforms are "unapplied" so that when moving down to a different leaf node, the previous nodes transforms dont effect it. 

3. What is the use of the GL3ScenegraphRenderer class? If you wanted to create a textual rendering of the scene
graph (e.g. a textual description of each node) how would you write such a renderer?

	that class builds the meshes needed for each node that has an object as well as handling shader for each obj. It then draws the objs in order.

	I would write the renderer to instead of drawing, print out the data needed to be "textually rendered"